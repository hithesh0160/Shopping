name: Shopping Maven CI

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Linux Dependencies (for Playwright and browsers)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwoff1 libopus0 libwebp7 libwebpdemux2 libenchant1c2a \
            libgudev-1.0-0 libsecret-1-0 libhyphen0 libxss1 \
            libgtk-3-0 libxcomposite1 libxdamage1 libxrandr2 \
            libasound2 libatk1.0-0 libcups2 libdbus-1-3 \
            libgdk-pixbuf2.0-0 libnspr4 libnss3 libxshmfence1 \
            libxtst6 libvpx7 libevent-2.1-7 libgles2 libx264-dev \
            libflite1 libharfbuzz-icu0 libgstapp-1.0-0 \
            libgstaudio-1.0-0 libgstvideo-1.0-0 libgstpbutils-1.0-0 \
            libgsttag-1.0-0 libgstgl-1.0-0 libgstcodecparsers-1.0-0 \
            libgstfft-1.0-0

      - name: Install Playwright Browsers
        working-directory: ./shop
        run: mvn exec:java -Dexec.mainClass=com.microsoft.playwright.CLI -Dexec.args="install"

      - name: Run Maven and capture filtered output
        id: capture_output
        working-directory: ./shop
        run: |
          set -e
          mvn -B clean test 2>&1 | tee maven.log > full_output.log

          # Extract relevant lines after a marker or fallback
          FILTERED_OUTPUT="$(awk '/\[INFO\] Running TestSuite/ {found=1; next} found' full_output.log || tail -n 40 full_output.log)"

          # Last 20 lines with escaped backticks for Telegram formatting
          TRUNCATED_OUTPUT="$(echo "$FILTERED_OUTPUT" | tail -n 20 | sed 's/`/\\`/g')"

          echo "BUILD_OUTPUT<<EOF" >> $GITHUB_ENV
          echo "$TRUNCATED_OUTPUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send Telegram Message on Success
        if: ${{ success() }}
        run: |
          MESSAGE="‚úÖ *Build Success* for \`${{ github.repository }}\`!\n\nüîó [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\nüìù Output (last 20 lines):\n\`\`\`\n${{ env.BUILD_OUTPUT }}\n\`\`\`"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            --data-urlencode chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            --data-urlencode text="$MESSAGE" \
            -d parse_mode=Markdown

      - name: Send Telegram Message on Failure
        if: ${{ failure() }}
        run: |
          MESSAGE="‚ùå *Build Failed* for \`${{ github.repository }}\`!\n\nüîó [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\nüìù Output (last 20 lines):\n\`\`\`\n${{ env.BUILD_OUTPUT }}\n\`\`\`"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            --data-urlencode chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            --data-urlencode text="$MESSAGE" \
            -d parse_mode=Markdown
